CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    telegram_id BIGINT UNIQUE,
    pet_ids INT[] DEFAULT '{}',
    name VARCHAR(100)
);



CREATE TABLE pets (
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    pet_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    date_birth DATE NOT NULL,
    sex CHAR(1) CHECK (sex IN ('М', 'Ж')) NOT NULL,
    breed VARCHAR(50) NOT NULL,
    color VARCHAR(50) NOT NULL,
    weight FLOAT NOT NULL,
    sterilized CHAR(3) CHECK (sterilized IN ('Да', 'Нет')) NOT NULL,
    chip_number VARCHAR(20),
    chip_place VARCHAR(100),
    town VARCHAR(100) NOT NULL,
    keeping VARCHAR(100) NOT NULL,
    special_signs VARCHAR(250),
    photo BYTEA
);

-- Функция для добавления pet_id в таблицу user_id

CREATE OR REPLACE FUNCTION update_users_pets()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE users
    SET pet_ids = array_append(pet_ids, NEW.pet_id)
    WHERE user_id = NEW.user_id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_users_pets
AFTER INSERT ON pets
FOR EACH ROW
EXECUTE FUNCTION update_users_pets();



CREATE TABLE medical_card (
    pet_id INT REFERENCES pets(pet_id) ON DELETE CASCADE,
    allergy VARCHAR(250),
    chronic_diseases VARCHAR(250),
    counter INT DEFAULT 0,
    diseases TEXT[] DEFAULT '{}',
    recommendations TEXT[] DEFAULT '{}'
);

CREATE OR REPLACE FUNCTION add_disease_and_recommendation()
RETURNS TRIGGER AS $$
BEGIN
    -- Проверяем, что новые данные действительно передаются для добавления
    IF TG_OP = 'INSERT' OR (NEW.diseases IS DISTINCT FROM OLD.diseases OR NEW.recommendations IS DISTINCT FROM OLD.recommendations) THEN
        -- Увеличиваем счётчик на 1
        NEW.counter := NEW.counter + 1;

        -- Добавляем новую болезнь в массив diseases
        NEW.diseases := array_append(OLD.diseases, NEW.diseases[NEW.counter]);

        -- Добавляем новую рекомендацию в массив recommendations
        NEW.recommendations := array_append(OLD.recommendations, NEW.recommendations[NEW.counter]);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_add_disease_and_recommendation
BEFORE INSERT OR UPDATE ON  medical_card
FOR EACH ROW
EXECUTE FUNCTION add_disease_and_recommendation();



CREATE TABLE shedule (
    pet_id INT REFERENCES pets(pet_id) ON DELETE CASCADE,
    drug VARCHAR(100) NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    replay_per_day INT NOT NULL,
    duration INT NOT NULL
);


======================================================================================
ALTER TABLE medical_card
ALTER COLUMN allergy TYPE VARCHAR(250),
ALTER COLUMN chronic_diseases TYPE VARCHAR(250);
======================================================================================

INSERT INTO users(telegram_id, name) VALUES(12345, 'TestName');

INSERT INTO pets(user_id, name, date_birth, sex, breed, color, weight, sterilized, town, keeping) VALUES(1, 'Bim', '2015-10-25', 'М', 'Лабрадор', 'Белый', 50, 'Нет', 'Кемерово', 'Квартира');

INSERT INTO medical_card(pet_id, chronic_diseases, diseases,
 recommendations) VALUES(4, 'Дисплазия тазобедренных суставов',
  '{Педикулёз}', '{Капли на холку}');

UPDATE medical_card 
SET diseases = array_append(diseases, 'Спид'), 
    recommendations = array_append(recommendations, 'Не трахать подушку')
WHERE pet_id = 4;

UPDATE medical_card 
SET diseases = array_append(diseases, 'Понос')
WHERE pet_id = 4;

UPDATE medical_card 
SET recommendations = array_append(recommendations, 'Чаще гулять')
WHERE pet_id = 4;

drop table users CASCADE;
drop table shedule CASCADE;
drop table pets CASCADE;
drop table medical_card CASCADE;